// Generated by gencpp from file segway_msgs/bms_fb.msg
// DO NOT EDIT!


#ifndef SEGWAY_MSGS_MESSAGE_BMS_FB_H
#define SEGWAY_MSGS_MESSAGE_BMS_FB_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace segway_msgs
{
template <class ContainerAllocator>
struct bms_fb_
{
  typedef bms_fb_<ContainerAllocator> Type;

  bms_fb_()
    : bat_soc(0)
    , bat_charging(0)
    , bat_vol(0)
    , bat_current(0)
    , bat_temp(0)  {
    }
  bms_fb_(const ContainerAllocator& _alloc)
    : bat_soc(0)
    , bat_charging(0)
    , bat_vol(0)
    , bat_current(0)
    , bat_temp(0)  {
  (void)_alloc;
    }



   typedef int16_t _bat_soc_type;
  _bat_soc_type bat_soc;

   typedef int16_t _bat_charging_type;
  _bat_charging_type bat_charging;

   typedef int32_t _bat_vol_type;
  _bat_vol_type bat_vol;

   typedef int32_t _bat_current_type;
  _bat_current_type bat_current;

   typedef int16_t _bat_temp_type;
  _bat_temp_type bat_temp;





  typedef boost::shared_ptr< ::segway_msgs::bms_fb_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segway_msgs::bms_fb_<ContainerAllocator> const> ConstPtr;

}; // struct bms_fb_

typedef ::segway_msgs::bms_fb_<std::allocator<void> > bms_fb;

typedef boost::shared_ptr< ::segway_msgs::bms_fb > bms_fbPtr;
typedef boost::shared_ptr< ::segway_msgs::bms_fb const> bms_fbConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segway_msgs::bms_fb_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segway_msgs::bms_fb_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::segway_msgs::bms_fb_<ContainerAllocator1> & lhs, const ::segway_msgs::bms_fb_<ContainerAllocator2> & rhs)
{
  return lhs.bat_soc == rhs.bat_soc &&
    lhs.bat_charging == rhs.bat_charging &&
    lhs.bat_vol == rhs.bat_vol &&
    lhs.bat_current == rhs.bat_current &&
    lhs.bat_temp == rhs.bat_temp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::segway_msgs::bms_fb_<ContainerAllocator1> & lhs, const ::segway_msgs::bms_fb_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace segway_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::bms_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::bms_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::bms_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::bms_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::bms_fb_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::bms_fb_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segway_msgs::bms_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "558ba6f83cd88272c1434058df263b3b";
  }

  static const char* value(const ::segway_msgs::bms_fb_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x558ba6f83cd88272ULL;
  static const uint64_t static_value2 = 0xc1434058df263b3bULL;
};

template<class ContainerAllocator>
struct DataType< ::segway_msgs::bms_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segway_msgs/bms_fb";
  }

  static const char* value(const ::segway_msgs::bms_fb_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segway_msgs::bms_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16  bat_soc    \n"
"int16  bat_charging \n"
"int32  bat_vol \n"
"int32  bat_current \n"
"int16  bat_temp\n"
;
  }

  static const char* value(const ::segway_msgs::bms_fb_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segway_msgs::bms_fb_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bat_soc);
      stream.next(m.bat_charging);
      stream.next(m.bat_vol);
      stream.next(m.bat_current);
      stream.next(m.bat_temp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bms_fb_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segway_msgs::bms_fb_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segway_msgs::bms_fb_<ContainerAllocator>& v)
  {
    s << indent << "bat_soc: ";
    Printer<int16_t>::stream(s, indent + "  ", v.bat_soc);
    s << indent << "bat_charging: ";
    Printer<int16_t>::stream(s, indent + "  ", v.bat_charging);
    s << indent << "bat_vol: ";
    Printer<int32_t>::stream(s, indent + "  ", v.bat_vol);
    s << indent << "bat_current: ";
    Printer<int32_t>::stream(s, indent + "  ", v.bat_current);
    s << indent << "bat_temp: ";
    Printer<int16_t>::stream(s, indent + "  ", v.bat_temp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGWAY_MSGS_MESSAGE_BMS_FB_H
