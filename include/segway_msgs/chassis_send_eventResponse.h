// Generated by gencpp from file segway_msgs/chassis_send_eventResponse.msg
// DO NOT EDIT!


#ifndef SEGWAY_MSGS_MESSAGE_CHASSIS_SEND_EVENTRESPONSE_H
#define SEGWAY_MSGS_MESSAGE_CHASSIS_SEND_EVENTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace segway_msgs
{
template <class ContainerAllocator>
struct chassis_send_eventResponse_
{
  typedef chassis_send_eventResponse_<ContainerAllocator> Type;

  chassis_send_eventResponse_()
    : ros_is_received(false)  {
    }
  chassis_send_eventResponse_(const ContainerAllocator& _alloc)
    : ros_is_received(false)  {
  (void)_alloc;
    }



   typedef uint8_t _ros_is_received_type;
  _ros_is_received_type ros_is_received;





  typedef boost::shared_ptr< ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator> const> ConstPtr;

}; // struct chassis_send_eventResponse_

typedef ::segway_msgs::chassis_send_eventResponse_<std::allocator<void> > chassis_send_eventResponse;

typedef boost::shared_ptr< ::segway_msgs::chassis_send_eventResponse > chassis_send_eventResponsePtr;
typedef boost::shared_ptr< ::segway_msgs::chassis_send_eventResponse const> chassis_send_eventResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator1> & lhs, const ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator2> & rhs)
{
  return lhs.ros_is_received == rhs.ros_is_received;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator1> & lhs, const ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace segway_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "317de0799d1f80bbc2c640730286f483";
  }

  static const char* value(const ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x317de0799d1f80bbULL;
  static const uint64_t static_value2 = 0xc2c640730286f483ULL;
};

template<class ContainerAllocator>
struct DataType< ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segway_msgs/chassis_send_eventResponse";
  }

  static const char* value(const ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool   ros_is_received\n"
;
  }

  static const char* value(const ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ros_is_received);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct chassis_send_eventResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segway_msgs::chassis_send_eventResponse_<ContainerAllocator>& v)
  {
    s << indent << "ros_is_received: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ros_is_received);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGWAY_MSGS_MESSAGE_CHASSIS_SEND_EVENTRESPONSE_H
