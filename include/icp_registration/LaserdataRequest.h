// Generated by gencpp from file icp_registration/LaserdataRequest.msg
// DO NOT EDIT!


#ifndef ICP_REGISTRATION_MESSAGE_LASERDATAREQUEST_H
#define ICP_REGISTRATION_MESSAGE_LASERDATAREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/LaserScan.h>
#include <sensor_msgs/LaserScan.h>
#include <geometry_msgs/Transform.h>

namespace icp_registration
{
template <class ContainerAllocator>
struct LaserdataRequest_
{
  typedef LaserdataRequest_<ContainerAllocator> Type;

  LaserdataRequest_()
    : laser1()
    , laser2()
    , guess()  {
    }
  LaserdataRequest_(const ContainerAllocator& _alloc)
    : laser1(_alloc)
    , laser2(_alloc)
    , guess(_alloc)  {
  (void)_alloc;
    }



   typedef  ::sensor_msgs::LaserScan_<ContainerAllocator>  _laser1_type;
  _laser1_type laser1;

   typedef  ::sensor_msgs::LaserScan_<ContainerAllocator>  _laser2_type;
  _laser2_type laser2;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _guess_type;
  _guess_type guess;





  typedef boost::shared_ptr< ::icp_registration::LaserdataRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::icp_registration::LaserdataRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LaserdataRequest_

typedef ::icp_registration::LaserdataRequest_<std::allocator<void> > LaserdataRequest;

typedef boost::shared_ptr< ::icp_registration::LaserdataRequest > LaserdataRequestPtr;
typedef boost::shared_ptr< ::icp_registration::LaserdataRequest const> LaserdataRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::icp_registration::LaserdataRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::icp_registration::LaserdataRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::icp_registration::LaserdataRequest_<ContainerAllocator1> & lhs, const ::icp_registration::LaserdataRequest_<ContainerAllocator2> & rhs)
{
  return lhs.laser1 == rhs.laser1 &&
    lhs.laser2 == rhs.laser2 &&
    lhs.guess == rhs.guess;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::icp_registration::LaserdataRequest_<ContainerAllocator1> & lhs, const ::icp_registration::LaserdataRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace icp_registration

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::icp_registration::LaserdataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::icp_registration::LaserdataRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::icp_registration::LaserdataRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::icp_registration::LaserdataRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::icp_registration::LaserdataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::icp_registration::LaserdataRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::icp_registration::LaserdataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eb2a40ef0b86c5a7609c0b2aa7fc56e0";
  }

  static const char* value(const ::icp_registration::LaserdataRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeb2a40ef0b86c5a7ULL;
  static const uint64_t static_value2 = 0x609c0b2aa7fc56e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::icp_registration::LaserdataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "icp_registration/LaserdataRequest";
  }

  static const char* value(const ::icp_registration::LaserdataRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::icp_registration::LaserdataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_msgs/LaserScan laser1\n"
"sensor_msgs/LaserScan laser2\n"
"geometry_msgs/Transform guess\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/LaserScan\n"
"# Single scan from a planar laser range-finder\n"
"#\n"
"# If you have another ranging device with different behavior (e.g. a sonar\n"
"# array), please find or create a different message, since applications\n"
"# will make fairly laser-specific assumptions about this data\n"
"\n"
"Header header            # timestamp in the header is the acquisition time of \n"
"                         # the first ray in the scan.\n"
"                         #\n"
"                         # in frame frame_id, angles are measured around \n"
"                         # the positive Z axis (counterclockwise, if Z is up)\n"
"                         # with zero angle being forward along the x axis\n"
"                         \n"
"float32 angle_min        # start angle of the scan [rad]\n"
"float32 angle_max        # end angle of the scan [rad]\n"
"float32 angle_increment  # angular distance between measurements [rad]\n"
"\n"
"float32 time_increment   # time between measurements [seconds] - if your scanner\n"
"                         # is moving, this will be used in interpolating position\n"
"                         # of 3d points\n"
"float32 scan_time        # time between scans [seconds]\n"
"\n"
"float32 range_min        # minimum range value [m]\n"
"float32 range_max        # maximum range value [m]\n"
"\n"
"float32[] ranges         # range data [m] (Note: values < range_min or > range_max should be discarded)\n"
"float32[] intensities    # intensity data [device-specific units].  If your\n"
"                         # device does not provide intensities, please leave\n"
"                         # the array empty.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::icp_registration::LaserdataRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::icp_registration::LaserdataRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.laser1);
      stream.next(m.laser2);
      stream.next(m.guess);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaserdataRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::icp_registration::LaserdataRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::icp_registration::LaserdataRequest_<ContainerAllocator>& v)
  {
    s << indent << "laser1: ";
    s << std::endl;
    Printer< ::sensor_msgs::LaserScan_<ContainerAllocator> >::stream(s, indent + "  ", v.laser1);
    s << indent << "laser2: ";
    s << std::endl;
    Printer< ::sensor_msgs::LaserScan_<ContainerAllocator> >::stream(s, indent + "  ", v.laser2);
    s << indent << "guess: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.guess);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ICP_REGISTRATION_MESSAGE_LASERDATAREQUEST_H
